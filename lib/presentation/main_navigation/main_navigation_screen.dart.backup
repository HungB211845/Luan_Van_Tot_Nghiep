import 'package:agricultural_pos/features/auth/models/auth_state.dart';
import 'package:agricultural_pos/features/auth/providers/auth_provider.dart';
import 'package:agricultural_pos/features/auth/services/secure_storage_service.dart';
import 'package:flutter/material.dart';
import 'package:flutter/foundation.dart';
import 'package:provider/provider.dart';

// Screens for each tab
import '../../core/routing/route_names.dart';
import '../home/home_screen.dart';
import '../../features/pos/screens/transaction/transaction_list_screen.dart';
import '../../features/pos/screens/pos/pos_screen.dart';
import '../../features/auth/screens/profile/profile_screen.dart';
import '../../features/products/screens/products/product_list_screen.dart';

// Providers
import '../../features/pos/providers/transaction_provider.dart';
import '../../features/customers/providers/customer_provider.dart';
import '../../features/products/providers/product_edit_mode_provider.dart';
import '../../core/providers/navigation_provider.dart';

// Tab Navigator + Responsive
import 'tab_navigator.dart';
import '../../shared/utils/responsive.dart';

class MainNavigationScreen extends StatefulWidget {
  const MainNavigationScreen({super.key});

  @override
  State<MainNavigationScreen> createState() => _MainNavigationScreenState();
}

class _MainNavigationScreenState extends State<MainNavigationScreen> {
  late final AuthProvider _authProvider;

  // Navigator keys to maintain state for each tab
  final List<GlobalKey<NavigatorState>> _navigatorKeys = [
    GlobalKey<NavigatorState>(debugLabel: 'HomeNavigator'),
    GlobalKey<NavigatorState>(debugLabel: 'TransactionsNavigator'),
    GlobalKey<NavigatorState>(debugLabel: 'POSNavigator'),
    GlobalKey<NavigatorState>(debugLabel: 'ProductsNavigator'),
    GlobalKey<NavigatorState>(debugLabel: 'ProfileNavigator'),
  ];

  @override
  void initState() {
    super.initState();
    _authProvider = context.read<AuthProvider>();
    _authProvider.addListener(_onAuthStateChanged);

    // Initialize providers on startup
    WidgetsBinding.instance.addPostFrameCallback((_) {
      context.read<TransactionProvider>().loadTransactions();
      context.read<CustomerProvider>().loadCustomers();
    });
  }

  @override
  void dispose() {
    _authProvider.removeListener(_onAuthStateChanged);
    super.dispose();
  }

  void _onAuthStateChanged() {
    if (!mounted) return;

    if (_authProvider.state.status == AuthStatus.unauthenticated) {
      // Use a post-frame callback to avoid trying to navigate during a build
      WidgetsBinding.instance.addPostFrameCallback((_) async {
        final storeCode = await SecureStorageService().getLastStoreCode();
        if (!mounted) return;

        final route = (storeCode == null || storeCode.isEmpty)
            ? RouteNames.storeCode
            : RouteNames.login;

        Navigator.of(context).pushNamedAndRemoveUntil(route, (route) => false);
      });
    }
  }

  Future<bool> _onWillPop() async {
    final navigationProvider = context.read<NavigationProvider>();
    final key = _navigatorKeys[navigationProvider.currentIndex];
    if (key.currentState?.canPop() ?? false) {
      key.currentState?.pop();
      return false; // Don't exit app
    }
    return true; // Exit app
  }

  @override
  Widget build(BuildContext context) {
    return Consumer2<ProductEditModeProvider, NavigationProvider>(
      builder: (context, editModeProvider, navigationProvider, child) {
        final hideBottomNav = editModeProvider.isEditMode;
        final currentIndex = navigationProvider.currentIndex;

        // üîç DEBUG: Print platform and responsive detection
        if (kDebugMode) {
          print('üîç MAIN NAV DEBUG: Platform.isWeb=${kIsWeb}, DeviceType=${context.responsive.deviceType.name}, Width=${context.responsive.screenWidth.toInt()}px');
        }

        return WillPopScope(
          onWillPop: _onWillPop,
          child: context.adaptiveWidget(
            mobile: _buildMobileLayout(currentIndex, navigationProvider, hideBottomNav),
            tablet: _buildTabletLayout(currentIndex, navigationProvider),
            desktop: _buildDesktopLayout(currentIndex, navigationProvider),
          ),
        );
      },
    );
  }

  Widget _buildMobileLayout(int currentIndex, NavigationProvider navigationProvider, bool hideBottomNav) {
    return Scaffold(
      body: IndexedStack(
        index: currentIndex,
        children: <Widget>[
          _buildOffstageNavigator(0, const HomeScreen(), currentIndex),
          _buildOffstageNavigator(1, const TransactionListScreen(), currentIndex),
          _buildOffstageNavigator(2, const POSScreen(), currentIndex),
          _buildOffstageNavigator(3, const ProductListScreen(), currentIndex),
          _buildOffstageNavigator(4, const ProfileScreen(), currentIndex),
        ],
      ),
      bottomNavigationBar: hideBottomNav ? null : _buildFlatIOSBottomNav(currentIndex, navigationProvider),
    );
  }

  Widget _buildTabletLayout(int currentIndex, NavigationProvider navigationProvider) {
    return Scaffold(
      body: Row(
        children: [
          // Side navigation rail
          Container(
            width: 80,
            decoration: BoxDecoration(
              color: Colors.white,
              border: Border(right: BorderSide(color: Colors.grey[300]!)),
            ),
            child: _buildNavigationRail(currentIndex, navigationProvider),
          ),
          // Content area
          Expanded(
            child: IndexedStack(
              index: currentIndex,
              children: <Widget>[
                _buildOffstageNavigator(0, const HomeScreen(), currentIndex),
                _buildOffstageNavigator(1, const TransactionListScreen(), currentIndex),
                _buildOffstageNavigator(2, const POSScreen(), currentIndex),
                _buildOffstageNavigator(3, const ProductListScreen(), currentIndex),
                _buildOffstageNavigator(4, const ProfileScreen(), currentIndex),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildDesktopLayout(int currentIndex, NavigationProvider navigationProvider) {
    return Scaffold(
      body: Row(
        children: [
          // Sidebar navigation (wider than tablet)
          Container(
            width: 250,
            decoration: BoxDecoration(
              color: Colors.white,
              boxShadow: [
                BoxShadow(
                  color: Colors.black.withValues(alpha: 0.1),
                  blurRadius: 8,
                  offset: const Offset(2, 0),
                ),
              ],
            ),
            child: _buildSidebarNavigation(currentIndex, navigationProvider),
          ),
          // Content area (no AppBar!)
          Expanded(
            child: IndexedStack(
              index: currentIndex,
              children: <Widget>[
                _buildOffstageNavigator(0, const HomeScreen(), currentIndex),
                _buildOffstageNavigator(1, const TransactionListScreen(), currentIndex),
                _buildOffstageNavigator(2, const POSScreen(), currentIndex),
                _buildOffstageNavigator(3, const ProductListScreen(), currentIndex),
                _buildOffstageNavigator(4, const ProfileScreen(), currentIndex),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildNavigationRail(int currentIndex, NavigationProvider navigationProvider) {
    return NavigationRail(
      selectedIndex: currentIndex,
      onDestinationSelected: (index) => navigationProvider.changeTab(index),
      backgroundColor: Colors.white,
      selectedIconTheme: const IconThemeData(color: Colors.green),
      selectedLabelTextStyle: const TextStyle(color: Colors.green),
      destinations: const [
        NavigationRailDestination(
          icon: Icon(Icons.home_outlined),
          selectedIcon: Icon(Icons.home),
          label: Text('Trang ch·ªß'),
        ),
        NavigationRailDestination(
          icon: Icon(Icons.receipt_long_outlined),
          selectedIcon: Icon(Icons.receipt_long),
          label: Text('Giao d·ªãch'),
        ),
        NavigationRailDestination(
          icon: Icon(Icons.point_of_sale_outlined),
          selectedIcon: Icon(Icons.point_of_sale),
          label: Text('B√°n h√†ng'),
        ),
        NavigationRailDestination(
          icon: Icon(Icons.inventory_2_outlined),
          selectedIcon: Icon(Icons.inventory_2),
          label: Text('S·∫£n ph·∫©m'),
        ),
        NavigationRailDestination(
          icon: Icon(Icons.person_outline),
          selectedIcon: Icon(Icons.person),
          label: Text('H·ªì s∆°'),
        ),
      ],
    );
  }

  Widget _buildSidebarNavigation(int currentIndex, NavigationProvider navigationProvider) {
    return Column(
      children: [
        // Header
        Container(
          height: 80,
          padding: const EdgeInsets.all(16),
          child: Row(
            children: [
              Container(
                width: 40,
                height: 40,
                decoration: BoxDecoration(
                  color: Colors.green,
                  borderRadius: BorderRadius.circular(8),
                ),
                child: const Icon(Icons.agriculture, color: Colors.white),
              ),
              const SizedBox(width: 12),
              const Text(
                'AgriPOS',
                style: TextStyle(
                  fontSize: 18,
                  fontWeight: FontWeight.bold,
                  color: Colors.green,
                ),
              ),
            ],
          ),
        ),
        const Divider(height: 1),
        
        // Navigation items
        Expanded(
          child: ListView(
            padding: const EdgeInsets.symmetric(vertical: 8),
            children: [
              _buildSidebarItem(0, Icons.home, 'Trang ch·ªß', currentIndex, navigationProvider),
              _buildSidebarItem(1, Icons.receipt_long, 'Giao d·ªãch', currentIndex, navigationProvider),
              _buildSidebarItem(2, Icons.point_of_sale, 'B√°n h√†ng', currentIndex, navigationProvider),
              _buildSidebarItem(3, Icons.inventory_2, 'S·∫£n ph·∫©m', currentIndex, navigationProvider),
              _buildSidebarItem(4, Icons.person, 'H·ªì s∆°', currentIndex, navigationProvider),
            ],
          ),
        ),
      ],
    );
  }

  Widget _buildSidebarItem(int index, IconData icon, String label, int currentIndex, NavigationProvider navigationProvider) {
    final isSelected = currentIndex == index;
    return Container(
      margin: const EdgeInsets.symmetric(horizontal: 8, vertical: 2),
      child: Material(
        color: isSelected ? Colors.green.withValues(alpha: 0.1) : Colors.transparent,
        borderRadius: BorderRadius.circular(8),
        child: InkWell(
          borderRadius: BorderRadius.circular(8),
          onTap: () => navigationProvider.changeTab(index),
          child: Padding(
            padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
            child: Row(
              children: [
                Icon(
                  icon,
                  color: isSelected ? Colors.green : Colors.grey[600],
                ),
                const SizedBox(width: 12),
                Text(
                  label,
                  style: TextStyle(
                    color: isSelected ? Colors.green : Colors.grey[800],
                    fontWeight: isSelected ? FontWeight.w600 : FontWeight.normal,
                  ),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }
    return Offstage(
      offstage: currentIndex != index,
      child: TabNavigator(
        navigatorKey: _navigatorKeys[index],
        initialScreen: initialScreen,
  Widget _buildOffstageNavigator(int index, Widget initialScreen, int currentIndex) {
    return Offstage(
      offstage: currentIndex != index,
      child: TabNavigator(
        navigatorKey: _navigatorKeys[index],
        initialScreen: initialScreen,
      ),
    );
  }
    return Container(
      decoration: BoxDecoration(
        border: Border(top: BorderSide(color: Colors.grey[300]!, width: 0.5)),
      ),
      child: BottomNavigationBar(
        currentIndex: currentIndex,
        onTap: (index) => navigationProvider.changeTab(index),
        
        // iOS-style configuration
        type: BottomNavigationBarType.fixed,
        backgroundColor: Colors.white,
        selectedItemColor: Colors.green,
        unselectedItemColor: Colors.grey[600],
        elevation: 0,
        selectedFontSize: 10,
        unselectedFontSize: 10,

        items: const <BottomNavigationBarItem>[
          BottomNavigationBarItem(
            icon: Icon(Icons.home_outlined),
            activeIcon: Icon(Icons.home),
            label: 'Trang ch·ªß',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.history_outlined),
            activeIcon: Icon(Icons.history),
            label: 'Giao d·ªãch',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.point_of_sale_outlined),
            activeIcon: Icon(Icons.point_of_sale),
            label: 'B√°n h√†ng',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.inventory_2_outlined),
            activeIcon: Icon(Icons.inventory_2),
            label: 'S·∫£n ph·∫©m',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.person_outline),
            activeIcon: Icon(Icons.person),
            label: 'T√†i kho·∫£n',
          ),
        ],
      ),
    );
  }
}
