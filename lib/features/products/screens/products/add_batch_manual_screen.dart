import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:provider/provider.dart';
import 'dart:math';
import '../../models/product_batch.dart';
import '../../providers/product_provider.dart';
import '../../providers/company_provider.dart';
import '../../../../shared/utils/formatter.dart';
import '../../../../shared/services/base_service.dart';

/// Custom TextInputFormatter for VND currency
/// Formats: 1000000 → 1.000.000
class CurrencyInputFormatter extends TextInputFormatter {
  @override
  TextEditingValue formatEditUpdate(
    TextEditingValue oldValue,
    TextEditingValue newValue,
  ) {
    if (newValue.text.isEmpty) {
      return newValue;
    }

    // Remove all non-digit characters
    String digitsOnly = newValue.text.replaceAll(RegExp(r'[^\d]'), '');

    if (digitsOnly.isEmpty) {
      return const TextEditingValue();
    }

    // Format with thousand separators (dot)
    String formatted = _formatWithDots(digitsOnly);

    return TextEditingValue(
      text: formatted,
      selection: TextSelection.collapsed(offset: formatted.length),
    );
  }

  String _formatWithDots(String number) {
    if (number.isEmpty) return '';

    // Reverse the string to add dots from right to left
    String reversed = number.split('').reversed.join();
    String result = '';

    for (int i = 0; i < reversed.length; i++) {
      if (i > 0 && i % 3 == 0) {
        result += '.';
      }
      result += reversed[i];
    }

    return result.split('').reversed.join();
  }
}

/// Màn hình nhập lô hàng thủ công
/// Dành cho hàng mua lẻ không có đơn đặt trước
class AddBatchManualScreen extends StatefulWidget {
  const AddBatchManualScreen({Key? key}) : super(key: key);

  @override
  State<AddBatchManualScreen> createState() => _AddBatchManualScreenState();
}

class _AddBatchManualScreenState extends State<AddBatchManualScreen> {
  final _formKey = GlobalKey<FormState>();
  bool _isLoading = false;

  // Controllers
  final _batchNumberController = TextEditingController();
  final _quantityController = TextEditingController();
  final _costPriceController = TextEditingController();
  final _notesController = TextEditingController();

  // Date fields
  DateTime _receivedDate = DateTime.now();
  DateTime? _expiryDate;

  // Supplier selection
  String? _selectedSupplierId;

  @override
  void initState() {
    super.initState();
    // Load suppliers
    WidgetsBinding.instance.addPostFrameCallback((_) {
      context.read<CompanyProvider>().loadCompanies();
    });
  }

  @override
  void dispose() {
    _batchNumberController.dispose();
    _quantityController.dispose();
    _costPriceController.dispose();
    _notesController.dispose();
    super.dispose();
  }

  /// Generate random batch code
  String _generateBatchCode() {
    final now = DateTime.now();
    final random = Random();
    final randomNum = random.nextInt(9999).toString().padLeft(4, '0');
    return 'LOT${now.year}${now.month.toString().padLeft(2, '0')}${now.day.toString().padLeft(2, '0')}-$randomNum';
  }

  Future<void> _saveBatch() async {
    if (!_formKey.currentState!.validate()) {
      return;
    }

    setState(() => _isLoading = true);

    try {
      final provider = context.read<ProductProvider>();
      final product = provider.selectedProduct;

      if (product == null) {
        throw Exception('Không tìm thấy sản phẩm');
      }

      final batch = ProductBatch(
        id: '', // Will be generated by database
        productId: product.id,
        batchNumber: _batchNumberController.text.trim(),
        quantity: int.parse(_quantityController.text.trim()),
        // Remove dots before parsing (1.000.000 → 1000000)
        costPrice: double.parse(_costPriceController.text.trim().replaceAll('.', '')),
        receivedDate: _receivedDate,
        expiryDate: _expiryDate,
        supplierId: _selectedSupplierId,
        purchaseOrderId: null, // Manual entry, no PO
        notes: _notesController.text.trim().isEmpty ? null : _notesController.text.trim(),
        createdAt: DateTime.now(),
        updatedAt: DateTime.now(),
        storeId: BaseService.getDefaultStoreId() ?? '',
      );

      final success = await provider.addProductBatch(batch);

      if (success && mounted) {
        // Refresh product batches
        await provider.loadProductBatches(product.id);

        Navigator.of(context).pop(); // Close this screen
        Navigator.of(context).pop(); // Close method selection screen

        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text('Đã thêm lô hàng thành công'),
            backgroundColor: Colors.green,
            duration: Duration(seconds: 2),
          ),
        );
      } else if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text(provider.errorMessage.isEmpty
              ? 'Có lỗi xảy ra khi thêm lô hàng'
              : provider.errorMessage),
            backgroundColor: Colors.red,
          ),
        );
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Lỗi: $e'),
            backgroundColor: Colors.red,
          ),
        );
      }
    } finally {
      if (mounted) {
        setState(() => _isLoading = false);
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    final product = context.read<ProductProvider>().selectedProduct;

    if (product == null) {
      return Scaffold(
        appBar: AppBar(
          title: const Text('Nhập Kho Thủ Công'),
          backgroundColor: Colors.green,
          foregroundColor: Colors.white,
        ),
        body: const Center(
          child: Text('Không tìm thấy sản phẩm'),
        ),
      );
    }

    return Scaffold(
      backgroundColor: Colors.grey[50],
      appBar: AppBar(
        title: const Text(
          'Nhập Kho Thủ Công',
          style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold),
        ),
        backgroundColor: Colors.teal,
        foregroundColor: Colors.white,
        elevation: 0,
      ),
      body: Form(
        key: _formKey,
        child: SingleChildScrollView(
          padding: const EdgeInsets.all(20),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.stretch,
            children: [
              // Product info
              _buildProductCard(product),

              const SizedBox(height: 24),

              // Batch form
              Card(
                elevation: 2,
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(16),
                ),
                child: Padding(
                  padding: const EdgeInsets.all(20),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      const Text(
                        'Thông tin lô hàng',
                        style: TextStyle(
                          fontSize: 18,
                          fontWeight: FontWeight.bold,
                          color: Colors.black87,
                        ),
                      ),
                      const SizedBox(height: 20),

                      // Batch number with random button
                      Row(
                        children: [
                          Expanded(
                            child: TextFormField(
                              controller: _batchNumberController,
                              decoration: _buildInputDecoration(
                                label: 'Mã lô *',
                                hint: 'Ví dụ: LOT20250930-0001',
                                icon: Icons.qr_code_2,
                              ),
                              validator: (value) {
                                if (value == null || value.trim().isEmpty) {
                                  return 'Vui lòng nhập mã lô';
                                }
                                return null;
                              },
                            ),
                          ),
                          const SizedBox(width: 8),
                          Tooltip(
                            message: 'Tạo mã tự động',
                            child: ElevatedButton(
                              onPressed: () {
                                setState(() {
                                  _batchNumberController.text = _generateBatchCode();
                                });
                              },
                              style: ElevatedButton.styleFrom(
                                backgroundColor: Colors.blue,
                                foregroundColor: Colors.white,
                                padding: const EdgeInsets.all(16),
                                shape: RoundedRectangleBorder(
                                  borderRadius: BorderRadius.circular(12),
                                ),
                              ),
                              child: const Icon(Icons.casino),
                            ),
                          ),
                        ],
                      ),

                      const SizedBox(height: 16),

                      // Quantity and Cost Price
                      Row(
                        children: [
                          Expanded(
                            child: TextFormField(
                              controller: _quantityController,
                              decoration: _buildInputDecoration(
                                label: 'Số lượng *',
                                hint: '100',
                              ),
                              keyboardType: TextInputType.number,
                              validator: (value) {
                                if (value == null || value.trim().isEmpty) {
                                  return 'Nhập số lượng';
                                }
                                final qty = int.tryParse(value);
                                if (qty == null || qty <= 0) {
                                  return 'Số lượng > 0';
                                }
                                return null;
                              },
                            ),
                          ),
                          const SizedBox(width: 12),
                          Expanded(
                            child: TextFormField(
                              controller: _costPriceController,
                              decoration: _buildInputDecoration(
                                label: 'Giá vốn *',
                                hint: '1.000.000',
                              ),
                              keyboardType: TextInputType.number,
                              inputFormatters: [
                                CurrencyInputFormatter(),
                              ],
                              validator: (value) {
                                if (value == null || value.trim().isEmpty) {
                                  return 'Nhập giá vốn';
                                }
                                // Remove dots before parsing (1.000.000 → 1000000)
                                final cleanedValue = value.replaceAll('.', '');
                                final price = double.tryParse(cleanedValue);
                                if (price == null || price < 0) {
                                  return 'Giá ≥ 0';
                                }
                                return null;
                              },
                            ),
                          ),
                        ],
                      ),

                      const SizedBox(height: 16),

                      // Received date
                      InkWell(
                        onTap: () async {
                          final picked = await showDatePicker(
                            context: context,
                            initialDate: _receivedDate,
                            firstDate: DateTime(2000),
                            lastDate: DateTime.now(),
                          );
                          if (picked != null) {
                            setState(() => _receivedDate = picked);
                          }
                        },
                        child: InputDecorator(
                          decoration: _buildInputDecoration(
                            label: 'Ngày nhập *',
                            icon: Icons.calendar_today,
                          ),
                          child: Text(
                            AppFormatter.formatDate(_receivedDate),
                            style: const TextStyle(fontSize: 16),
                          ),
                        ),
                      ),

                      const SizedBox(height: 16),

                      // Expiry date
                      InkWell(
                        onTap: () async {
                          final picked = await showDatePicker(
                            context: context,
                            initialDate: _expiryDate ?? DateTime.now().add(const Duration(days: 365)),
                            firstDate: DateTime.now(),
                            lastDate: DateTime(2100),
                          );
                          if (picked != null) {
                            setState(() => _expiryDate = picked);
                          }
                        },
                        child: InputDecorator(
                          decoration: _buildInputDecoration(
                            label: 'Hạn sử dụng',
                            icon: Icons.event_available,
                          ),
                          child: Text(
                            _expiryDate == null
                              ? 'Chọn ngày (tùy chọn)'
                              : AppFormatter.formatDate(_expiryDate!),
                            style: TextStyle(
                              fontSize: 16,
                              color: _expiryDate == null ? Colors.grey : Colors.black87,
                            ),
                          ),
                        ),
                      ),

                      const SizedBox(height: 16),

                      // Supplier dropdown
                      Consumer<CompanyProvider>(
                        builder: (context, provider, _) {
                          return DropdownButtonFormField<String>(
                            value: _selectedSupplierId,
                            decoration: _buildInputDecoration(
                              label: 'Nhà cung cấp (tùy chọn)',
                              icon: Icons.business,
                            ),
                            hint: const Text('Chọn nhà cung cấp'),
                            items: provider.companies.map((company) {
                              return DropdownMenuItem(
                                value: company.id,
                                child: Text(company.name),
                              );
                            }).toList(),
                            onChanged: (value) {
                              setState(() => _selectedSupplierId = value);
                            },
                          );
                        },
                      ),

                      const SizedBox(height: 16),

                      // Notes
                      TextFormField(
                        controller: _notesController,
                        decoration: _buildInputDecoration(
                          label: 'Ghi chú',
                          hint: 'Thông tin bổ sung về lô hàng...',
                        ),
                        maxLines: 3,
                      ),
                    ],
                  ),
                ),
              ),

              const SizedBox(height: 24),

              // Action buttons
              Row(
                children: [
                  Expanded(
                    child: OutlinedButton(
                      onPressed: _isLoading ? null : () => Navigator.of(context).pop(),
                      style: OutlinedButton.styleFrom(
                        padding: const EdgeInsets.symmetric(vertical: 16),
                        side: BorderSide(color: Colors.grey[400]!),
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(12),
                        ),
                      ),
                      child: const Text(
                        'Hủy',
                        style: TextStyle(fontSize: 16, fontWeight: FontWeight.w600),
                      ),
                    ),
                  ),
                  const SizedBox(width: 16),
                  Expanded(
                    child: ElevatedButton(
                      onPressed: _isLoading ? null : _saveBatch,
                      style: ElevatedButton.styleFrom(
                        backgroundColor: Colors.blue,
                        foregroundColor: Colors.white,
                        padding: const EdgeInsets.symmetric(vertical: 16),
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(12),
                        ),
                      ),
                      child: _isLoading
                        ? const SizedBox(
                            height: 20,
                            width: 20,
                            child: CircularProgressIndicator(
                              strokeWidth: 2,
                              valueColor: AlwaysStoppedAnimation<Color>(Colors.white),
                            ),
                          )
                        : const Text(
                            'Lưu Lô Hàng',
                            style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
                          ),
                    ),
                  ),
                ],
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildProductCard(dynamic product) {
    return Card(
      elevation: 2,
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(16),
      ),
      color: Colors.blue.withOpacity(0.05),
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Row(
          children: [
            Container(
              padding: const EdgeInsets.all(12),
              decoration: BoxDecoration(
                color: Colors.blue.withOpacity(0.15),
                borderRadius: BorderRadius.circular(12),
              ),
              child: Icon(
                Icons.inventory_2,
                color: Colors.blue[700],
                size: 28,
              ),
            ),
            const SizedBox(width: 16),
            Expanded(
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  const Text(
                    'Sản phẩm',
                    style: TextStyle(
                      fontSize: 12,
                      color: Colors.grey,
                      fontWeight: FontWeight.w500,
                    ),
                  ),
                  const SizedBox(height: 4),
                  Text(
                    product.name,
                    style: const TextStyle(
                      fontSize: 17,
                      fontWeight: FontWeight.bold,
                      color: Colors.black87,
                    ),
                  ),
                  Text(
                    'SKU: ${product.sku ?? "Chưa có"}',
                    style: TextStyle(
                      fontSize: 13,
                      color: Colors.grey[600],
                    ),
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }

  InputDecoration _buildInputDecoration({
    required String label,
    String? hint,
    IconData? icon,
  }) {
    return InputDecoration(
      labelText: label,
      hintText: hint,
      prefixIcon: icon != null ? Icon(icon, size: 20) : null,
      border: OutlineInputBorder(
        borderRadius: BorderRadius.circular(12),
      ),
      enabledBorder: OutlineInputBorder(
        borderRadius: BorderRadius.circular(12),
        borderSide: BorderSide(color: Colors.grey[300]!),
      ),
      focusedBorder: OutlineInputBorder(
        borderRadius: BorderRadius.circular(12),
        borderSide: const BorderSide(color: Colors.blue, width: 2),
      ),
      filled: true,
      fillColor: Colors.white,
      contentPadding: const EdgeInsets.symmetric(horizontal: 16, vertical: 14),
    );
  }
}